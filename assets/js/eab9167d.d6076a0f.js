"use strict";(self.webpackChunkdocusaurus_classic_typescript=self.webpackChunkdocusaurus_classic_typescript||[]).push([[1878],{6316:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var s=i(5893),r=i(1151);const a={sidebar_position:4},t="Diagrams",o={id:"api-documentation/layouts/diagrams",title:"Diagrams",description:"Diagrams are created using React Flow.",source:"@site/docs/api-documentation/layouts/diagrams.md",sourceDirName:"api-documentation/layouts",slug:"/api-documentation/layouts/diagrams",permalink:"/oml-vision-docs/docs/next/api-documentation/layouts/diagrams",draft:!1,unlisted:!1,editUrl:"https://github.com/opencaesar/oml-vision-docs/tree/master/docs/api-documentation/layouts/diagrams.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Trees",permalink:"/oml-vision-docs/docs/next/api-documentation/layouts/trees"},next:{title:"Sparql",permalink:"/oml-vision-docs/docs/next/api-documentation/sparql"}},d={},c=[{value:"Defining Diagram",id:"defining-diagram",level:2},{value:"Terminology",id:"terminology",level:3},{value:"path",id:"path",level:3},{value:"name",id:"name",level:3},{value:"queries",id:"queries",level:3},{value:"rowMapping",id:"rowmapping",level:3},{value:"id",id:"id",level:4},{value:"name",id:"name-1",level:4},{value:"labelFormat",id:"labelformat",level:4},{value:"colorKey",id:"colorkey",level:4},{value:"edgeMatchKey",id:"edgematchkey",level:4},{value:"subRowMappings",id:"subrowmappings",level:4},{value:"edges",id:"edges",level:3},{value:"sourceKey",id:"sourcekey",level:4},{value:"targetKey",id:"targetkey",level:4}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"diagrams",children:"Diagrams"}),"\n",(0,s.jsxs)(n.p,{children:["Diagrams are created using ",(0,s.jsx)(n.a,{href:"https://reactflow.dev/",children:"React Flow"}),"."]}),"\n",(0,s.jsx)(n.admonition,{title:"diagrams.json",type:"info",children:(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.code,{children:"src/vision/layouts/diagrams.json"})," file (case-sensitive)"]})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"src/vision/layouts/diagrams.json"})," file is responsible for:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Defining what OML Vision Diagrams can render","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Name of the Diagrams"}),"\n",(0,s.jsx)(n.li,{children:"Name of the nodes for the Diagram"}),"\n",(0,s.jsx)(n.li,{children:"Name of the edges for the Diagram"}),"\n",(0,s.jsx)(n.li,{children:"Queries for the Diagram node content"}),"\n",(0,s.jsx)(n.li,{children:"Queries for the Diagram edge content"}),"\n",(0,s.jsx)(n.li,{children:"How to map Diagrams node queries to edge queries"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"It is formatted as a JSON data structure."}),"\n",(0,s.jsxs)(n.p,{children:["An example of what this looks like is seen below with the source code found ",(0,s.jsx)(n.a,{href:"https://github.com/UTNAK/open-source-rover/blob/main/src/vision/layouts/diagramLayouts.json",children:"here"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "decompositions": {\n    "name": "Decomposition",\n    "queries": {\n      "decompositions": "component.sparql",\n      "edge": "component.sparql"\n    },\n    "rowMapping": {\n      "id": "decompositions",\n      "name": "System",\n      "labelFormat": "{c1_localname}",\n      "colorKey": "c1_localname",\n      "edgeMatchKey": "c1_localname"\n    },\n    "edges": [\n      {\n        "id": "edge",\n        "name": "Edge",\n        "labelFormat": "hasSubsystem",\n        "colorKey": "c2_localname",\n        "sourceKey": "c1_localname",\n        "targetKey": "c2_localname"\n      }\n    ]\n  },\n  "movingscenario": {\n    "name": "Scenario",\n    "queries": {\n      "movingscenario": "scenario_move.sparql",\n      "edge": "scenario_move.sparql"\n    },\n    "rowMapping": {\n      "id": "movingscenario",\n      "name": "Task",\n      "labelFormat": "{f2_id} \\n {f2_cname}",\n      "colorKey": "f2_id",\n      "edgeMatchKey": "f2_id"\n    },\n    "edges": [\n      {\n        "id": "edge",\n        "name": "Edge",\n        "labelFormat": "invokes",\n        "colorKey": "f2_id",\n        "sourceKey": "f2_id",\n        "targetKey": "f3_id"\n      }\n    ]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"defining-diagram",children:"Defining Diagram"}),"\n",(0,s.jsx)(n.p,{children:"A Diagram must be properly defined in order to be rendered by OML Vision"}),"\n",(0,s.jsx)(n.h3,{id:"terminology",children:"Terminology"}),"\n",(0,s.jsx)(n.p,{children:"OML Vision defines a node and edge as follows:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Node: A graphical element that contains information"}),"\n",(0,s.jsx)(n.li,{children:"Edge: A graphical element that connects information"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Diagram Terminology",src:i(3625).Z+"",width:"3680",height:"2252"})}),"\n",(0,s.jsx)(n.h3,{id:"path",children:"path"}),"\n",(0,s.jsx)(n.admonition,{title:"REQUIRED",type:"danger",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"path: string\n"})})}),"\n",(0,s.jsx)(n.p,{children:"This string defines the path of the Diagram."}),"\n",(0,s.jsxs)(n.admonition,{title:"USER INTERFACE",type:"tip",children:[(0,s.jsxs)(n.p,{children:["The name of the ",(0,s.jsx)(n.code,{children:"path"})," is the same path that was defined in the ",(0,s.jsx)(n.code,{children:"pages.json"}),"."]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Diagram Path",src:i(5041).Z+"",width:"3680",height:"2252"})})]}),"\n",(0,s.jsx)(n.h3,{id:"name",children:"name"}),"\n",(0,s.jsx)(n.admonition,{title:"OPTIONAL",type:"note",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"name: string\n"})})}),"\n",(0,s.jsxs)(n.p,{children:["This string gives a name to the Diagram in the ",(0,s.jsx)(n.code,{children:"diagramLayouts.json"})," file."]}),"\n",(0,s.jsx)(n.h3,{id:"queries",children:"queries"}),"\n",(0,s.jsx)(n.admonition,{title:"REQUIRED",type:"danger",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"queries: {}\n"})})}),"\n",(0,s.jsx)(n.p,{children:"This object contains the queries that will query the RDF Triplestore for the content that will populate in the Diagram."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Look at the sparql docs for more info found ",(0,s.jsx)(n.a,{href:"/docs/api-documentation/sparql",children:"here"})]})}),"\n",(0,s.jsxs)(n.admonition,{title:"FUSEKI",type:"tip",children:[(0,s.jsxs)(n.p,{children:["You can test queries by going to localhost:3030 which is created once data is loaded into the Fuseki DB.  You can watch more info about testing queries with Fuseki by going ",(0,s.jsx)(n.a,{href:"https://www.youtube.com/watch?v=w_pJ3XiBWeM&t=621s",children:"here"})]}),(0,s.jsxs)(n.p,{children:["The AI & DS Channel (2021, February 18). SPARQL Query [Video]. YouTube. ",(0,s.jsx)(n.a,{href:"https://www.youtube.com/watch?v=w_pJ3XiBWeM&t=621s",children:"https://www.youtube.com/watch?v=w_pJ3XiBWeM&t=621s"})]})]}),"\n",(0,s.jsx)(n.h3,{id:"rowmapping",children:"rowMapping"}),"\n",(0,s.jsx)(n.admonition,{title:"REQUIRED",type:"danger",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"rowMapping: {}\n"})})}),"\n",(0,s.jsxs)(n.p,{children:["This object defines how the ",(0,s.jsx)(n.code,{children:"queries"})," map to the ",(0,s.jsx)(n.code,{children:"columnNames"})]}),"\n",(0,s.jsx)(n.h4,{id:"id",children:"id"}),"\n",(0,s.jsx)(n.admonition,{title:"REQUIRED",type:"danger",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"id: string\n"})})}),"\n",(0,s.jsxs)(n.p,{children:["This string the ",(0,s.jsx)(n.code,{children:"id"})," for the ",(0,s.jsx)(n.code,{children:"rowMapping"}),"."]}),"\n",(0,s.jsxs)(n.admonition,{title:"USER INTERFACE",type:"tip",children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"id"})," correspond to one of the ",(0,s.jsx)(n.code,{children:"columnNames"}),"."]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Diagram Row Mapping Id",src:i(9348).Z+"",width:"3680",height:"2252"})})]}),"\n",(0,s.jsx)(n.h4,{id:"name-1",children:"name"}),"\n",(0,s.jsx)(n.admonition,{title:"OPTIONAL",type:"note",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"name: string\n"})})}),"\n",(0,s.jsxs)(n.p,{children:["This string gives a name to the ",(0,s.jsx)(n.code,{children:"rowMapping"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"labelformat",children:"labelFormat"}),"\n",(0,s.jsx)(n.admonition,{title:"REQUIRED",type:"danger",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"labelFormat: string\n"})})}),"\n",(0,s.jsxs)(n.p,{children:["This string contains the label of the row for the ",(0,s.jsx)(n.code,{children:"rowMapping"}),"."]}),"\n",(0,s.jsxs)(n.admonition,{title:"USER INTERFACE",type:"tip",children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"labelFormat"})," is rendered in the rows of the Diagram shown in the red boxes."]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"STRING INTERPOLATION"})}),(0,s.jsxs)(n.p,{children:["OML Vision supports string interpolation with the queries that were formatted.  The format is ",(0,s.jsx)(n.code,{children:'"{string}"'})]}),(0,s.jsxs)(n.p,{children:["An example is found ",(0,s.jsx)(n.a,{href:"https://github.com/UTNAK/open-source-rover/blob/main/src/vision/layouts/diagramLayouts.json#L11",children:"here"})]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Diagram Column Names",src:i(7958).Z+"",width:"3680",height:"2252"})})]}),"\n",(0,s.jsx)(n.h4,{id:"colorkey",children:"colorKey"}),"\n",(0,s.jsx)(n.admonition,{title:"REQUIRED",type:"danger",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"colorKey: string\n"})})}),"\n",(0,s.jsx)(n.p,{children:"This string is the seed for a random color generator for the nodes rendered in the Diagram.  Needed to generate legend."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"STRING INTERPOLATION"})}),"\n",(0,s.jsxs)(n.p,{children:["OML Vision supports string interpolation with the queries that were formatted.  The format is ",(0,s.jsx)(n.code,{children:'"{string}"'})]}),"\n",(0,s.jsx)(n.h4,{id:"edgematchkey",children:"edgeMatchKey"}),"\n",(0,s.jsx)(n.admonition,{title:"REQUIRED",type:"danger",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"edgeMatchKey: string\n"})})}),"\n",(0,s.jsx)(n.p,{children:"This string defines the edge for each node in the Diagram."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"STRING INTERPOLATION"})}),"\n",(0,s.jsxs)(n.p,{children:["OML Vision supports string interpolation with the queries that were formatted.  The format is ",(0,s.jsx)(n.code,{children:'"{string}"'})]}),"\n",(0,s.jsx)(n.h4,{id:"subrowmappings",children:"subRowMappings"}),"\n",(0,s.jsx)(n.admonition,{title:"OPTIONAL",type:"note",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"subRowMappings: {\n    id: string\n    name: string\n    labelFormat: string\n    colorKey: string\n    edgeMatchKey: string\n  }[]\n"})})}),"\n",(0,s.jsxs)(n.p,{children:["This ",(0,s.jsx)(n.code,{children:"subRowMappings"})," array of objects defines the ",(0,s.jsx)(n.code,{children:"id"}),", ",(0,s.jsx)(n.code,{children:"name"}),", ",(0,s.jsx)(n.code,{children:"labelFormat"}),", ",(0,s.jsx)(n.code,{children:"colorKey"}),", and ",(0,s.jsx)(n.code,{children:"edgeMatchKey"})," for the subrows of the Diagram."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["The ",(0,s.jsx)(n.code,{children:"id"}),", ",(0,s.jsx)(n.code,{children:"name"}),", ",(0,s.jsx)(n.code,{children:"labelFormat"}),", ",(0,s.jsx)(n.code,{children:"colorKey"}),", and ",(0,s.jsx)(n.code,{children:"edgeMatchKey"})," have the same data structure as ",(0,s.jsx)(n.code,{children:"rowMapping"})]})}),"\n",(0,s.jsx)(n.h3,{id:"edges",children:"edges"}),"\n",(0,s.jsx)(n.admonition,{title:"REQUIRED",type:"danger",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"edges: {\n    id: string\n    name: string\n    labelFormat: string\n    colorKey: string\n    sourceKey: string\n    targetKey: string\n  }[]\n"})})}),"\n",(0,s.jsxs)(n.p,{children:["This ",(0,s.jsx)(n.code,{children:"edges"})," array of objects defines the ",(0,s.jsx)(n.code,{children:"id"}),", ",(0,s.jsx)(n.code,{children:"name"}),", ",(0,s.jsx)(n.code,{children:"labelFormat"}),", and ",(0,s.jsx)(n.code,{children:"colorKey"})," for the edges of the Diagram."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["The ",(0,s.jsx)(n.code,{children:"id"}),", ",(0,s.jsx)(n.code,{children:"name"}),", ",(0,s.jsx)(n.code,{children:"labelFormat"}),", and ",(0,s.jsx)(n.code,{children:"colorKey"})," have the same data structure as ",(0,s.jsx)(n.code,{children:"rowMapping"})]})}),"\n",(0,s.jsx)(n.h4,{id:"sourcekey",children:"sourceKey"}),"\n",(0,s.jsx)(n.admonition,{title:"REQUIRED",type:"danger",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"sourceKey: string\n"})})}),"\n",(0,s.jsx)(n.p,{children:"This string defines the source node for the edge in the Diagram."}),"\n",(0,s.jsx)(n.h4,{id:"targetkey",children:"targetKey"}),"\n",(0,s.jsx)(n.admonition,{title:"REQUIRED",type:"danger",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"targetKey: string\n"})})}),"\n",(0,s.jsx)(n.p,{children:"This string defines the target node for the edge in the Diagram."})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},5041:(e,n,i)=>{i.d(n,{Z:()=>s});const s=i.p+"assets/images/diagramPath-a32511528971d0cc075408af2c16977f.png"},9348:(e,n,i)=>{i.d(n,{Z:()=>s});const s=i.p+"assets/images/diagramRowMappingId-25edd3d007281287babb45748ab9b2ef.png"},7958:(e,n,i)=>{i.d(n,{Z:()=>s});const s=i.p+"assets/images/diagramRowMappingLabelFormat-7af8527188340d03e466480840453128.png"},3625:(e,n,i)=>{i.d(n,{Z:()=>s});const s=i.p+"assets/images/diagramTerminology-5efcbc91d5039268075d4fbe30067687.png"},1151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>t});var s=i(7294);const r={},a=s.createContext(r);function t(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);